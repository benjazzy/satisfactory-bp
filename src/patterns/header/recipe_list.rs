use winnow::{
    Bytes, Parser,
    binary::le_u32,
    combinator::{preceded, repeat},
    error::StrContext,
};

use crate::patterns::factory_string::{FString, fstring};

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct RecipeList<'d> {
    pub count: u32,
    pub recipies: Vec<FString<'d>>,
}

pub fn recipe_list<'d>(data: &mut &'d Bytes) -> winnow::Result<RecipeList<'d>> {
    let count = le_u32
        .context(StrContext::Label("recipie list length"))
        .parse_next(data)?;
    let recipies = repeat(count as usize, preceded(&[0x00; 4], fstring))
        .context(StrContext::Label("recipe path"))
        .parse_next(data)?;

    Ok(RecipeList { count, recipies })
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn check_recipe_list() {
        const DATA: [u8; 0xBC] = [
            0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x2F, 0x47,
            0x61, 0x6D, 0x65, 0x2F, 0x46, 0x61, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x47, 0x61, 0x6D,
            0x65, 0x2F, 0x50, 0x72, 0x6F, 0x74, 0x6F, 0x74, 0x79, 0x70, 0x65, 0x2F, 0x42, 0x75,
            0x69, 0x6C, 0x64, 0x61, 0x62, 0x6C, 0x65, 0x2F, 0x42, 0x65, 0x61, 0x6D, 0x73, 0x2F,
            0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x42, 0x65, 0x61, 0x6D, 0x5F, 0x50, 0x61,
            0x69, 0x6E, 0x74, 0x65, 0x64, 0x2E, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x42,
            0x65, 0x61, 0x6D, 0x5F, 0x50, 0x61, 0x69, 0x6E, 0x74, 0x65, 0x64, 0x5F, 0x43, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x2F, 0x47, 0x61, 0x6D, 0x65, 0x2F,
            0x46, 0x61, 0x63, 0x74, 0x6F, 0x72, 0x79, 0x47, 0x61, 0x6D, 0x65, 0x2F, 0x52, 0x65,
            0x63, 0x69, 0x70, 0x65, 0x73, 0x2F, 0x42, 0x75, 0x69, 0x6C, 0x64, 0x69, 0x6E, 0x67,
            0x73, 0x2F, 0x57, 0x61, 0x6C, 0x6C, 0x73, 0x2F, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65,
            0x5F, 0x57, 0x61, 0x6C, 0x6C, 0x5F, 0x38, 0x78, 0x34, 0x5F, 0x30, 0x31, 0x2E, 0x52,
            0x65, 0x63, 0x69, 0x70, 0x65, 0x5F, 0x57, 0x61, 0x6C, 0x6C, 0x5F, 0x38, 0x78, 0x34,
            0x5F, 0x30, 0x31, 0x5F, 0x43, 0x00,
        ];

        let first: FString = "/Game/FactoryGame/Prototype/Buildable/Beams/Recipe_Beam_Painted.Recipe_Beam_Painted_C\0".into();
        let second: FString =
            "/Game/FactoryGame/Recipes/Buildings/Walls/Recipe_Wall_8x4_01.Recipe_Wall_8x4_01_C\0"
                .into();

        let recipies = recipe_list
            .parse((&DATA[..]).into())
            .expect("Parser should succeed");

        assert_eq!(recipies.count, 2);
        assert_eq!(recipies.recipies, &[first, second]);
    }
}
